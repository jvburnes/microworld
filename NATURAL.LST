~
~  NATURAL
~
(PRINT 'NATURAL)

(PACKAGE NATURAL
    (DEF *PP-NET PNET INSTANCE-FILTER SELCT SHOWNET RECORD SETR GETR ADDR WORLD COMPILE SUBST GENNAME ATTACH INTERSECTION GETF 
    TESTF)
    (PUT NETWORK PARSE-WORD PARSE-NOUN-GROUP PARSE-COMMAND)
    {This eval compiles the ATN descriptions}
    (EVAL (PRINTC "Compiling ATN parsers..."))
    (EVAL (MAPCAR '[LAMBDA (FUNC)
                       (APPLY 'COMPILE
                           (GET FUNC
                               'NETWORK))]
              '(PARSE-WORD PARSE-NOUN-GROUP PARSE-COMMAND))))

(DEF '*PP-NET
    '[LAMBDA (L *PP:VTAB)
         (SETQ *PP:VTAB
             (CHRPOS *PP:FILE))
         (*PP-DELIM "(")
         (*PP-ATOM E)
         (*PP-BODY (CDR L) ")"
             '*PP-CONDI
             (+ *PP:VTAB 4))])

(DEF 'PNET
    '[LAMBDA (E F)
         [PROG (*PP:FILE *PP:VTAB)
             (SETQ *PP:FILE F)
             (SETQ *PP:VTAB 2)
             (UNMACEXPAND E)
             (*PP-NET (GET E
                          'NETWORK))
             (*PP-TAB 0)
             (RETURN 'OK)]])

(DEF 'INSTANCE-FILTER
    '[LAMBDA (NODE)
         (APPEND (SUBST [PROG (NOUN)
                            (SETQ NOUN
                                (GET NODE
                                    'NOUN))
                            (RETURN (COND
                                        [(MEMB 'PLURAL
                                             (GET NOUN
                                                 'FEATURES))
                                          (GET NOUN
                                              'SINGULAR-FORM)]
                                        [T
                                          NOUN]))]
                     'NOUN
                     '[PROG (OBJECTS)
                          (SETQ OBJECTS
                              (GET 'NOUN
                                  'INSTANCE))])
             (MAPCAR '[LAMBDA (ADJECTIVE)
                          (SUBST (GET ADJECTIVE
                                     'ADJECTIVE-FUNCTION)
                              'PREDICATE
                              '(SETQ OBJECTS
                                   (MAPCAN '[LAMBDA (CANDIDATE)
                                                (COND
                                                    [(PREDICATE CANDIDATE)
                                                      (LIST CANDIDATE)]
                                                    [T
                                                      NIL])] OBJECTS)))]
                 (GET NODE
                     'ADJECTIVES))
             (SUBST [PROG (DETERMINER NUMBER)
                        (SETQ DETERMINER
                            (GET NODE
                                'DETERMINER))
                        (SETQ NUMBER
                            (GET NODE
                                'NUMBER))
                        (RETURN (COND
                                    [(EQUAL DETERMINER
                                         'DEFINITE)
                                      (COND
                                          [(EQUAL NUMBER
                                               'SINGULAR)
                                            '(EQUAL (LENGTH OBJECTS) 1)]
                                          [(EQUAL NUMBER
                                               'PLURAL)
                                            '(GT (LENGTH OBJECTS) 1)])]
                                    [(EQUAL DETERMINER
                                         'INDEFINITE)
                                      (COND
                                          [(EQUAL NUMBER
                                               'SINGULAR)
                                            '(GT (LENGTH OBJECTS) 0)])]
                                    [(NUMBERP NUMBER)
                                      (LIST 'GT
                                          '(LENGTH OBJECTS) NUMBER)]))]
                 'TEST
                 '((COND
                       [TEST
                         (RETURN OBJECTS)]
                       [T
                         (RETURN NIL)]))))])

(DEF 'SELCT
    '[LAMBDA (X Y)
         (COND
             [(NULL X)
               NIL]
             [(MEMB (CAR X) Y)
               (CAR X)]
             [T
               (SELCT (CDR X) Y)])])

(DEF 'SHOWNET
    '[NLAMBDA (NAME)
         (PNET NAME NIL)])

(DEF 'RECORD
    '[NLAMBDA X
         (PUT (CAR X) X
             'NETWORK)
         'RECORDED])

(DEF 'SETR
    '[LAMBDA (REGISTER VALUE)
         (PUT THIS-NODE VALUE REGISTER)
         VALUE])

(DEF 'GETR
    '[LAMBDA (REGISTER)
         (GET THIS-NODE REGISTER)])

(DEF 'ADDR
    '[LAMBDA (REGISTER VALUE)
         (SETR REGISTER
             (CONS VALUE
                 (GETR REGISTER)))])

(DEF 'WORLD
    '[LAMBDA ()
         [PROG (TREE PROGRAM CROOM INST1 INST2 OPER REFUSE CMDWIN)
             (GETWINDOW CMDWIN
                 (0 0)
                 (25 80))
             (WINATTR 110 CMDWIN)
             (WINCLR CMDWIN)
             (SETQ CROOM FIRSTROOM)
             (PRINTC WELCOMEMSG CMDWIN)
             (TERPRI NIL CMDWIN)
             (LOOP (DO {Analyze English}
                       (SETQ REMAINING-WORDS
                           (READCMMD "" CMDWIN))
                       (SETQ SYNTREE
                           (PARSE-COMMAND (GENSYM) NIL))
                       (COND
                           [SYNTREE
                             {
Construct Operation
}
                             (SETQ INST1
                                 (INSTANCE-FILTER (GET SYNTREE
                                                      'NOUN-GROUP1)))
                             (COND
                                 [(GET SYNTREE
                                      'PREPOSITION)
                                   (SETQ INST2
                                       (INSTANCE-FILTER (GET SYNTREE
                                                            'NOUN-GROUP2)))])
                             (SETQ OPER
                                 (LIST (GET (GET SYNTREE
                                                'COMMAND)
                                           'GSYN)
                                     (COND
                                         [(EQUAL (GET SYNTREE
                                                     'PREPOSITION)
                                              'TO)
                                           (LIST (EVAL INST2)
                                               (EVAL INST1))]
                                         [T
                                           (LIST (EVAL INST1)
                                               (EVAL INST2))])))
                             {
Now we have operation and operands...Do preprocessing
}
                             (SETQ REFUSE
                                 (MAPCAN '[LAMBDA (PRE)
                                              (EVAL PRE)]
                                     (MAPCAN '[LAMBDA (OBJECT)
                                                  (GET OBJECT
                                                      'PREPROC)]
                                         (GET CROOM
                                             'CONTAINS))))
                             {
If no refusals, do operation
}
                             (COND
                                 [REFUSE
                                   ]
                                 [T
                                   (EVAL OPER)])
                             {
Do post processing
}
                             (MAPCAN '[LAMBDA (POST)
                                          (EVAL POST)]
                                 (MAPCAN '[LAMBDA (OBJECT)
                                              (GET OBJECT
                                                  'POSTPROC)]
                                     (GET CROOM
                                         'CONTAINS)))]
                           [T
                             (PRINTC "I'm afraid I don't understand that." CMDWIN)])))
             (RETURN 'OK)]])

(DEF 'COMPILE
    '[MLAMBDA (DESCRIPTION)
         {Compiles ATN description into LISP ATN parser}
         {To compile prerecorded ATN: (APPLY 'COMPILE (GET ATNNAME 'NETWORK))}
         [PROG (NAME BODY PROGRAM BEGINNING MIDDLE END)
             (SETQ NAME
                 (CADR DESCRIPTION))
             (SETQ BODY
                 (CDDR DESCRIPTION))
             (SETQ BEGINNING
                 (SUBST NAME
                     'REPLACE
                     '[PROG (THIS-NODE HOLD)
                          (SETQ HOLD REMAINING-WORDS)
                          (SETQ CURRENT-WORD
                              (CAR REMAINING-WORDS))
                          (SETQ THIS-NODE
                              (GENNAME 'REPLACE))]))
             (SETQ MIDDLE
                 (APPLY 'APPEND
                     (MAPCAR '[LAMBDA (STATE)
                                  (LIST (CAR STATE)
                                      (CONS 'COND
                                          (APPEND (MAPCAR '[LAMBDA (CLAUSE)
                                                               (APPEND (LIST (CADR CLAUSE))
                                                                   (COND
                                                                       [(CDR (CDDDR CLAUSE))
                                                                         (CDR (CDR (CDDDR CLAUSE)))])
                                                                   (LIST (LIST 'GO
                                                                             (CAR (CDDDR CLAUSE)))))]
                                                      (CDR STATE))
                                              '((T (GO LOSE))))))] BODY)))
             (SETQ END
                 '(WIN (COND
                           [(NOT (TESTF THIS-NODE FEATURES))
                             (GO LOSE)])
                      (ATTACH THIS-NODE PARENT-NODE)
                      (SETQ LAST-PARSED THIS-NODE)
                      (RETURN THIS-NODE) LOSE
                      (SETQ REMAINING-WORDS HOLD)
                      (SETQ CURRENT-WORD
                          (CAR REMAINING-WORDS))
                      (RETURN NIL)))
             (SETQ PROGRAM
                 (APPEND (APPEND BEGINNING MIDDLE) END))
             (RETURN (LIST 'DEFUN NAME
                         (APPEND '[LAMBDA (PARENT-NODE FEATURES)
                                      ]
                             (LIST PROGRAM))))]])

(DEF 'SUBST
    '[LAMBDA (NEW OLD TARGET)
         {Function substitutes <sexpr1> for <sexpr2> in <sexpr3>}
         [DEFUN RSBST
             [LAMBDA (TARGET)
                 (COND
                     [(NULL TARGET)
                       TARGET]
                     [(EQUAL TARGET OLD)
                       NEW]
                     [(ATOM TARGET)
                       TARGET]
                     [T
                       (CONS (RSBST (CAR TARGET))
                           (RSBST (CDR TARGET)))])]]
         (RSBST TARGET)])

(DEF 'GENNAME
    '[LAMBDA (NAME)
         [PROG (N)
             (COND
                 [(SETQ N
                      (GET NAME
                          'NAMECOUNTER))
                   ]
                 [T
                   (SETQ N 1)])
             (PUT NAME
                 (INC N)
                 'NAMECOUNTER)
             (RETURN (READLIST (APPEND (EXPLODE NAME)
                                   (EXPLODE N))))]])

(DEF 'ATTACH
    '[LAMBDA (C P)
         (PUT C P
             'PARENT)
         (PUT P
             (APPEND (GET P
                         'CHILDREN)
                 (LIST C))
             'CHILDREN)])

(DEF 'INTERSECTION
    '[LAMBDA (X Y)
         (COND
             [(NULL X)
               NIL]
             [(MEMBER (CAR X) Y)
               (CONS (CAR X)
                   (INTERSECTION (CDR X) Y))]
             [T
               (INTERSECTION (CDR X) Y)])])

(DEF 'GETF
    '[LAMBDA (X)
         (GET X
             'FEATURES)])

(DEF 'TESTF
    '[LAMBDA (NODE FEATURES)
         (COND
             [(NULL FEATURES)
               NIL]
             [(ATOM FEATURES)
               (SETQ FEATURES
                   (LIST FEATURES))])
         (EQUAL (LENGTH FEATURES)
             (LENGTH (INTERSECTION FEATURES
                         (GETF NODE))))])

(PUT 'PARSE-WORD
     '(PARSE-WORD (S1 (IF T --> WIN AFTER
                          (SETQ THIS-NODE CURRENT-WORD)
                          (SETQ REMAINING-WORDS
                              (CDR REMAINING-WORDS))
                          (COND
                              [REMAINING-WORDS
                                (SETQ CURRENT-WORD
                                    (CAR REMAINING-WORDS))]
                              [T
                                (SETQ CURRENT-WORD NIL)]))))
     'NETWORK)

(PUT 'PARSE-NOUN-GROUP
     '(PARSE-NOUN-GROUP (S1 (IF (PARSE-WORD THIS-NODE
                                    'DETERMINER) --> S2 AFTER
                                (SETR 'NUMBER
                                    (SELCT '(SINGULAR PLURAL)
                                        (GETF LAST-PARSED)))
                                (SETR 'DETERMINER
                                    (SELCT '(DEFINITE INDEFINITE)
                                        (GETF LAST-PARSED)))))
          (S2 (IF (PARSE-WORD THIS-NODE
                      'ADJECTIVE) --> S2 AFTER
                  (ADDR 'ADJECTIVES LAST-PARSED))
              (IF (PARSE-WORD THIS-NODE
                      'NOUN) --> WIN AFTER
                  (SETR 'NUMBER
                      (SELCT '(SINGULAR PLURAL)
                          (GETF LAST-PARSED)))
                  (SETR 'NOUN LAST-PARSED))))
     'NETWORK)

(PUT 'PARSE-COMMAND
     '(PARSE-COMMAND (S1 (IF (PARSE-WORD THIS-NODE
                                 'VERB) --> S2 AFTER
                             (SETR 'COMMAND LAST-PARSED)))
          (S2 (IF (NULL REMAINING-WORDS) --> WIN AFTER
                  (SETR 'IMP-OP
                      'IMPLICIT))
              (IF (PARSE-NOUN-GROUP THIS-NODE NIL) --> S3 AFTER
                  (SETR 'NOUN-GROUP1 LAST-PARSED)))
          (S3 (IF (NULL REMAINING-WORDS) --> WIN AFTER
                  (SETR 'IMP-OP
                      'UNARY))
              (IF (PARSE-WORD THIS-NODE
                      'PREPOSITION) --> S4 AFTER
                  (SETR 'IMP-OP
                      'BINARY)
                  (SETR 'PREPOSITION LAST-PARSED))
              (IF (PARSE-NOUN-GROUP THIS-NODE NIL) --> WIN AFTER
                  (SETR 'NOUN-GROUP2
                      (GETR 'NOUN-GROUP1))
                  (SETR 'NOUN-GROUP1 LAST-PARSED)
                  (SETR 'PREPOSITION
                      'TO)
                  (SETR 'IMP-OP
                      'BINARY)))
          (S4 (IF (PARSE-NOUN-GROUP THIS-NODE NIL) --> WIN AFTER
                  (SETR 'NOUN-GROUP2 LAST-PARSED))))
     'NETWORK)
(\; "This eval compiles the ATN descriptions")

(PRINTC "Compiling ATN parsers...")

(MAPCAR (QUOTE (LAMBDA (FUNC) (APPLY (QUOTE COMPILE) (GET FUNC (QUOTE NETWORK))))) (QUOTE (PARSE-WORD PARSE-NOUN-GROUP PARSE-COMMAND
)))

